// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package create_game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameHandlerClient is the client API for GameHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameHandlerClient interface {
	CreateGame(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	DeleteGame(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type gameHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameHandlerClient(cc grpc.ClientConnInterface) GameHandlerClient {
	return &gameHandlerClient{cc}
}

func (c *gameHandlerClient) CreateGame(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/GameHandler/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHandlerClient) DeleteGame(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/GameHandler/DeleteGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameHandlerServer is the server API for GameHandler service.
// All implementations must embed UnimplementedGameHandlerServer
// for forward compatibility
type GameHandlerServer interface {
	CreateGame(context.Context, *CreateRequest) (*CreateResponse, error)
	DeleteGame(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedGameHandlerServer()
}

// UnimplementedGameHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGameHandlerServer struct {
}

func (UnimplementedGameHandlerServer) CreateGame(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameHandlerServer) DeleteGame(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (UnimplementedGameHandlerServer) mustEmbedUnimplementedGameHandlerServer() {}

// UnsafeGameHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameHandlerServer will
// result in compilation errors.
type UnsafeGameHandlerServer interface {
	mustEmbedUnimplementedGameHandlerServer()
}

func RegisterGameHandlerServer(s grpc.ServiceRegistrar, srv GameHandlerServer) {
	s.RegisterService(&GameHandler_ServiceDesc, srv)
}

func _GameHandler_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHandlerServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameHandler/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHandlerServer).CreateGame(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHandler_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHandlerServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameHandler/DeleteGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHandlerServer).DeleteGame(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameHandler_ServiceDesc is the grpc.ServiceDesc for GameHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameHandler",
	HandlerType: (*GameHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GameHandler_CreateGame_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _GameHandler_DeleteGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "create-game.proto",
}
